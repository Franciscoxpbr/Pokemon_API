#Importando as bibliotecas 
import base64
from flask import Flask, send_file, redirect
from io import BytesIO
import openpyxl
import os
import requests
from PIL import Image
from threading import Thread

app = Flask(__name__)
#Definido a classe pokemon
class Pokemon:
    def __init__(self, id, name, types, sprites):
        self.id = id
        self.name = name
        self.types = types
        self.sprites = sprites
#Função para obter dados dos pokemomns 
def obter_dados_pokemon(id_pokemon):
    url = f'https://pokeapi.co/api/v2/pokemon/{id_pokemon}'
    resposta = requests.get(url)
    
    if resposta.status_code == 200:
        dados_pokemons = resposta.json()
        return dados_pokemons
    else:
        print(f'Falha ao obter dados para o Pokémon com ID {id_pokemon}')
#Função para baixar é salvar imagem do pokemon
def baixar_salvar_imagem(url, nome_arquivo):
    resposta = requests.get(url)

    if resposta.status_code == 200:
        imagem = Image.open(BytesIO(resposta.content))
        imagem.save(nome_arquivo)
        print(f'Imagem salva: {nome_arquivo}')
    else:
        print(f'Falha ao salvar imagem da Url: {url}')
#FunÇão para adicionar imagem salva no excel 
def adicionar_imagem_excel(planilha, linha, coluna, imagem_local):
    imagem_local_absoluto = os.path.abspath(imagem_local)
    img = openpyxl.drawing.image.Image(imagem_local_absoluto)
    img.width = 32
    img.height = 32
    planilha.add_image(img, f'{coluna}{linha}')

@app.route('/')
def raiz():
    return redirect('/pokemon')

@app.route('/pokemon', methods=['GET'])
def obter_excel_base64():
    lista_ids_pokemon = [1, 2, 3, 5, 6]
    resultados={}

    # Processando os IDs sequencialmente
    def processar_pokemon(id_pokemon):
        dados_pokemon = obter_dados_pokemon(id_pokemon)

        if dados_pokemon:
            nome = dados_pokemon['name']
            identificador = dados_pokemon['id']
            tipos = [tipo['type']['name'] for tipo in dados_pokemon['types']]
            imagem_url = dados_pokemon['sprites']['front_default'] if 'sprites' in dados_pokemon else ''

            nome_arquivo_imagem = f'{identificador}_{nome}.png'
            baixar_salvar_imagem(imagem_url, nome_arquivo_imagem)

            pokemon = Pokemon(id=identificador, name=nome, types=tipos, sprites=imagem_url)
            resultados[id_pokemon] = pokemon

    threads = []

    # Criando e iniciando threads para processar os pokemons
    for id_pokemon in lista_ids_pokemon:
        thread = Thread(target=processar_pokemon, args=(id_pokemon,))
        threads.append(thread)
        thread.start()

    # Aguardando todas as threads terminarem
    for thread in threads:
        thread.join()

    # Obtendo os resultados ordenados
    pokemons = [resultados[id_pokemon] for id_pokemon in sorted(lista_ids_pokemon)]

    # Criando um arquivo Excel
    arquivo_excel = openpyxl.Workbook()
    planilha = arquivo_excel.active

    # Adicionando cabeçalho
    cabecalho = ["Name", "ID", "Types", "Sprite"]
    planilha.append(cabecalho)

    # Preenchendo os dados na planilha
    for i, pokemon in enumerate(pokemons, start=2):  # Começando da linha 2 para incluir cabeçalho
        linha = [pokemon.name, pokemon.id, ', '.join(pokemon.types)]
        planilha.append(linha)

        # Adicionando imagem à coluna Sprite
        adicionar_imagem_excel(planilha, i, "D", f"{pokemon.id}_{pokemon.name}.png")
    # Salvando o arquivo Excel
    arquivo_excel.save("dados_pokemon.xlsx")
    print("Dados salvos no arquivo dados_pokemon.xlsx")
    # Salvando o arquivo Excel em BytesIO
    excel_bytesio = BytesIO()
    arquivo_excel.save(excel_bytesio)
    excel_bytes = excel_bytesio.getvalue()
    excel_base64 = base64.b64encode(excel_bytes).decode('utf-8')

    return excel_base64
#Configurando o servidor para  ouvir a porta 0800 no enderenço IP
if __name__ == '__main__':
    app.run(port=8000, host='127.0.0.1', debug=True, use_reloader=True)
